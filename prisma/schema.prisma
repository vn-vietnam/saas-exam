generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?  // Thêm để lưu mật khẩu đã hash

  accounts      Account[]
  sessions      Session[]
  examAttempts  UserExamAttempt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Quiz Exam System Models
model Exam {
  id              String   @id @default(cuid())
  title           String
  description     String?
  timeLimit       Int      // Time limit in minutes
  passingScore    Int      @default(70) // Passing percentage
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  type            String   @default("toeic") // toeic, vstep, university-entrance
  
  questions       Question[]
  examAttempts    UserExamAttempt[]
}

model Question {
  id              String   @id @default(cuid())
  examId          String
  questionText    String
  order           Int      // Order of question in the exam
  points          Int      @default(1) // Points for this question
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  exam            Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers         Answer[]
  userAnswers     UserAnswer[]
}

model Answer {
  id              String   @id @default(cuid())
  questionId      String
  answerText      String
  isCorrect       Boolean  @default(false)
  order           Int      // Order of answer option (A, B, C, D)
  createdAt       DateTime @default(now())
  
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers     UserAnswer[]
}

model UserExamAttempt {
  id              String   @id @default(cuid())
  userId          String
  examId          String
  startTime       DateTime @default(now())
  endTime         DateTime?
  score           Float?   // Percentage score
  isPassed        Boolean  @default(false)
  status          String   @default("in_progress") // in_progress, completed, timeout
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  exam            Exam     @relation(fields: [examId], references: [id])
  userAnswers     UserAnswer[]

  @@index([userId, examId])
}

model UserAnswer {
  id              String   @id @default(cuid())
  attemptId       String
  questionId      String
  answerId        String?  // Nullable in case user doesn't answer
  isCorrect       Boolean  @default(false)
  answeredAt      DateTime @default(now())
  
  attempt         UserExamAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question @relation(fields: [questionId], references: [id])
  answer          Answer?  @relation(fields: [answerId], references: [id])
  
  @@unique([attemptId, questionId])
  @@index([attemptId])
}
